- name: configure postgres
  tags: [smart_on_fhir, reset_db]
  copy: src=pg_hba.conf
        dest=/etc/postgresql/9.3/main/pg_hba.conf
  register: postgres_conf

- name: restart postgres
  tags: [smart_on_fhir, reset_db]
  when: postgres_conf.changed or force_rebuild
  service: name=postgresql state=restarted

- name: create postgres user
  tags: [smart_on_fhir]
  sudo_user: postgres
  postgresql_user: 
          name={{postgres_user}} 
          password={{postgres_password}}
          role_attr_flags=SUPERUSER
          
- name: configure api server service(Upstart)
  tags: [smart_on_fhir, reset_db]
  template: src=api-server.conf.j2
            dest=/etc/init/api-server.conf
            owner=root group=root mode=0644
  register: sof_service
  when: systemdPath.stat.isdir is not defined

- name: configure api server service(systemd)
  tags: [smart_on_fhir, reset_db]
  template: src=api-server.service.j2
            dest=/lib/systemd/system/api-server.service
  when: systemdPath.stat.isdir is defined and systemdPath.stat.isdir

- name: checkout api server
  tags: [smart_on_fhir, reset_db]
  sudo_user: "{{username}}"
  git: repo={{fhir_server_repo}}
       version={{fhir_server_branch}}
       dest={{install_dir}}/api-server
       update={{update_repositories}}
  register: sof_checkout

- name: stop api server
  tags: [smart_on_fhir]
  when: sof_checkout.changed or force_rebuild
  service: name=api-server state=stopped
  
- name: build api server
  tags: [smart_on_fhir]
  sudo_user: "{{username}}"
  environment:
    JAVA_HOME: "{{java_home_dir}}"
  when: sof_checkout.changed or force_rebuild
  shell: chdir={{install_dir}}/api-server
        ./grailsw dev war

- name: drop postgres db
  tags: [smart_on_fhir, reset_db]
  sudo_user: postgres
  when: (sof_checkout.changed or force_rebuild) and (not fhir_server_preserve_db)
  postgresql_db: state=absent name=fhir
          
- name: create postgres db
  tags: [smart_on_fhir, reset_db]
  sudo_user: postgres
  when: sof_checkout.changed or force_rebuild
  postgresql_db: name=fhir owner={{postgres_user}}

- name: restart api server
  tags: [smart_on_fhir, reset_db]
  when: (sof_checkout.changed or sof_service.changed) or force_rebuild
  service: name=api-server state=restarted
 
- name: wait for api server to become available
  tags: [smart_on_fhir, reset_db]
  wait_for: port=3000
  
- name: generate self-signed ssl certificate (fhir server)
  tags: [smart_on_fhir]
  when: fhir_server_secure_http and not use_custom_ssl_certificates
  shell: creates=/etc/nginx/ssl/fhir.crt
         /bin/echo -e "{{fhir_server_ssl_country}}\n{{fhir_server_ssl_province}}\n{{fhir_server_ssl_locality}}\n{{fhir_server_ssl_organization}}\n{{fhir_server_ssl_division}}\n{{fhir_server_host}}\n{{fhir_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/fhir.key -out /etc/nginx/ssl/fhir.crt
         
- name: import fhir server certificate in truststore
  tags: [smart_on_fhir]
  when: fhir_server_secure_http
  shell: /bin/echo -e "{{keystore_password}}\nyes\n" | keytool
           -importcert -trustcacerts
           -alias fhir
           -file /etc/nginx/ssl/fhir.crt
           -keystore {{install_dir}}/keystore
   
- name: configure nginx (api server)
  tags: [smart_on_fhir,nginx]
  template: src=nginx_default.j2 dest=/etc/nginx/sites-enabled/default owner=root group=root mode=0644
  notify:
        - restart nginx

- meta: flush_handlers
